// <auto-generated />
using System;
using Customers.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Customers.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210114221122_Version0001")]
    partial class Version0001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Customers.Domain.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Porto Alegre",
                            RegionId = 1L
                        });
                });

            modelBuilder.Entity("Customers.Domain.Models.Classification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Classifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "VIP"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Regular"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Sporadic"
                        });
                });

            modelBuilder.Entity("Customers.Domain.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 1L,
                            ClassificationId = 1L,
                            GenderId = 1L,
                            LastPurchase = new DateTime(2016, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Maurício",
                            Phone = "(11) 95429999",
                            UserId = 3L
                        },
                        new
                        {
                            Id = 2L,
                            CityId = 1L,
                            ClassificationId = 1L,
                            GenderId = 2L,
                            LastPurchase = new DateTime(2015, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carla",
                            Phone = "(53) 94569999 ",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CityId = 1L,
                            ClassificationId = 3L,
                            GenderId = 2L,
                            LastPurchase = new DateTime(2013, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Maria",
                            Phone = "(64) 94518888",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CityId = 1L,
                            ClassificationId = 2L,
                            GenderId = 1L,
                            LastPurchase = new DateTime(2016, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Douglas",
                            Phone = "(51) 12455555 ",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CityId = 1L,
                            ClassificationId = 2L,
                            GenderId = 2L,
                            LastPurchase = new DateTime(2016, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marta",
                            Phone = "(51) 45788888 ",
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("Customers.Domain.Models.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Masculine"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Feminine"
                        });
                });

            modelBuilder.Entity("Customers.Domain.Models.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Rio Grande do Sul"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "São Paulo"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Curitiba"
                        });
                });

            modelBuilder.Entity("Customers.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("PasswordLastUpdatedUtc")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "admin@app.com",
                            PasswordHash = new byte[] { 173, 217, 14, 64, 8, 143, 123, 161, 247, 177, 169, 81, 160, 118, 53, 237, 81, 28, 141, 188, 44, 118, 233, 135, 57, 17, 125, 251, 76, 112, 32, 237, 96, 48, 108, 247, 241, 131, 35, 56, 142, 100, 95, 216, 96, 161, 18, 187, 65, 239, 116, 174, 129, 210, 212, 48, 246, 56, 250, 93, 197, 164, 60, 22 },
                            PasswordLastUpdatedUtc = new DateTime(2021, 1, 14, 22, 11, 21, 908, DateTimeKind.Utc).AddTicks(7093),
                            PasswordSalt = new byte[] { 238, 189, 42, 19, 157, 11, 184, 255, 8, 131, 84, 135, 221, 168, 254, 49, 239, 47, 2, 87, 26, 255, 72, 54, 8, 248, 248, 111, 26, 178, 121, 103, 70, 177, 16, 198, 19, 183, 200, 211, 195, 245, 28, 75, 197, 114, 236, 36, 27, 39, 146, 159, 45, 28, 239, 130, 201, 113, 115, 158, 122, 127, 184, 173, 153, 107, 230, 88, 213, 176, 199, 129, 162, 194, 66, 140, 195, 162, 182, 2, 203, 252, 101, 153, 85, 241, 46, 218, 154, 70, 119, 224, 62, 85, 224, 77, 108, 88, 153, 221, 114, 232, 205, 124, 51, 233, 251, 73, 8, 19, 15, 43, 250, 72, 171, 130, 218, 186, 196, 5, 58, 129, 248, 24, 99, 219, 109, 156 },
                            UserRoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Email = "seller1@app.com",
                            PasswordHash = new byte[] { 71, 159, 240, 167, 155, 139, 5, 10, 66, 25, 214, 129, 226, 127, 50, 101, 113, 89, 159, 93, 198, 165, 214, 199, 206, 228, 254, 129, 34, 116, 104, 93, 234, 88, 131, 91, 19, 188, 110, 172, 111, 217, 160, 148, 229, 183, 227, 100, 136, 130, 207, 14, 160, 97, 177, 66, 159, 249, 51, 134, 94, 211, 221, 116 },
                            PasswordLastUpdatedUtc = new DateTime(2021, 1, 14, 22, 11, 21, 908, DateTimeKind.Utc).AddTicks(8069),
                            PasswordSalt = new byte[] { 238, 189, 42, 19, 157, 11, 184, 255, 8, 131, 84, 135, 221, 168, 254, 49, 239, 47, 2, 87, 26, 255, 72, 54, 8, 248, 248, 111, 26, 178, 121, 103, 70, 177, 16, 198, 19, 183, 200, 211, 195, 245, 28, 75, 197, 114, 236, 36, 27, 39, 146, 159, 45, 28, 239, 130, 201, 113, 115, 158, 122, 127, 184, 173, 153, 107, 230, 88, 213, 176, 199, 129, 162, 194, 66, 140, 195, 162, 182, 2, 203, 252, 101, 153, 85, 241, 46, 218, 154, 70, 119, 224, 62, 85, 224, 77, 108, 88, 153, 221, 114, 232, 205, 124, 51, 233, 251, 73, 8, 19, 15, 43, 250, 72, 171, 130, 218, 186, 196, 5, 58, 129, 248, 24, 99, 219, 109, 156 },
                            UserRoleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Email = "seller2@app.com",
                            PasswordHash = new byte[] { 115, 73, 35, 192, 103, 127, 50, 109, 143, 133, 55, 231, 174, 92, 126, 119, 73, 40, 7, 199, 223, 3, 11, 115, 159, 163, 41, 102, 181, 13, 52, 105, 47, 151, 252, 23, 242, 132, 181, 105, 237, 95, 66, 87, 46, 247, 244, 44, 244, 159, 173, 98, 213, 90, 33, 42, 35, 159, 254, 5, 187, 226, 68, 59 },
                            PasswordLastUpdatedUtc = new DateTime(2021, 1, 14, 22, 11, 21, 908, DateTimeKind.Utc).AddTicks(8098),
                            PasswordSalt = new byte[] { 238, 189, 42, 19, 157, 11, 184, 255, 8, 131, 84, 135, 221, 168, 254, 49, 239, 47, 2, 87, 26, 255, 72, 54, 8, 248, 248, 111, 26, 178, 121, 103, 70, 177, 16, 198, 19, 183, 200, 211, 195, 245, 28, 75, 197, 114, 236, 36, 27, 39, 146, 159, 45, 28, 239, 130, 201, 113, 115, 158, 122, 127, 184, 173, 153, 107, 230, 88, 213, 176, 199, 129, 162, 194, 66, 140, 195, 162, 182, 2, 203, 252, 101, 153, 85, 241, 46, 218, 154, 70, 119, 224, 62, 85, 224, 77, 108, 88, 153, 221, 114, 232, 205, 124, 51, 233, 251, 73, 8, 19, 15, 43, 250, 72, 171, 130, 218, 186, 196, 5, 58, 129, 248, 24, 99, 219, 109, 156 },
                            UserRoleId = 2L
                        });
                });

            modelBuilder.Entity("Customers.Domain.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsAdmin = true,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2L,
                            IsAdmin = false,
                            Name = "Seller"
                        });
                });

            modelBuilder.Entity("Customers.Domain.Models.City", b =>
                {
                    b.HasOne("Customers.Domain.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customers.Domain.Models.Customer", b =>
                {
                    b.HasOne("Customers.Domain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customers.Domain.Models.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customers.Domain.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customers.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customers.Domain.Models.User", b =>
                {
                    b.HasOne("Customers.Domain.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
